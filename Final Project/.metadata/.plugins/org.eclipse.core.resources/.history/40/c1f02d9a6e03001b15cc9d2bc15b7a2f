package MonkeyTests;

import static org.junit.Assert.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.awt.Color;

import org.junit.Test;

import Maze.Board;
import Maze.Chip;
import Maze.Items.ExitLock;
import Maze.Items.Key;
import Maze.Items.Treasure;
import Maze.Tiles.Exit;
import Maze.Tiles.FreeTile;
import Maze.Tiles.InfoField;
import Maze.Tiles.LockedDoor;
import Maze.Tiles.Tile;

/**
 * Description: <br/>
 * Test for the Maze packet.
 * 
 * @author Yun Zhou 300442776
 * @version
 */
public class MazeTest {
    /*
     * NEED TO LOAD THE GAME level BOARD constructor at the start of each test!!
     */

    /**
     * the 2d array map, for now, it is the Level 1 map.
     */
    Tile[][] map_levelOne;

    /**
     * Movement variables, easy for me to add arguments.
     */
    @SuppressWarnings("javadoc")
    private final String up = "up", left = "left", down = "down", right = "right";

    /**
     * Level variables, easy for me to add arguments.
     */
    @SuppressWarnings({ "javadoc", "unused" })
    private final String level0 = "level0", leve1 = "level1", level2 = "level2";

    /**
     * Description: <br/>
     * Test invalid input string.
     * 
     * @author Yun Zhou
     */
    @Test
    public void testInvalidMovementInput() {
        Board board = new Board(9, 9);// THIS PART SHOULD BE THE LEVEL

        map_levelOne = board.getTileArray();
        boolean isValid = false;
        try {
            board.moveChip("NORTH");
            board.moveChip("NORTH");
            board.moveChip("W");
            board.moveChip("A");
            board.moveChip("S");
            board.moveChip("D");
            isValid = true;

        } catch (AssertionError e) {
            assertFalse(isValid);
            // System.err.println("Invalid Input of the direction");
        }
    }

    /**
     * Description: <br/>
     * Test that the chip can move to the infofield tile.
     * 
     * @author Yun Zhou
     */
    @Test
    public void test_moveInfoField() {
        Board board = new Board(9, 9);
        map_levelOne = board.getTileArray();
        InfoField infoFreeTile = (InfoField) map_levelOne[3][4];
        assertFalse(infoFreeTile.containsChip());
        board.moveChip(up);
        assertTrue(infoFreeTile.containsChip());
    }

    /**
     * Description: <br/>
     * Test valid movement of the Chip. That is, check that location has
     * changed.
     * 
     * @author Yun Zhou
     */
    @Test
    public void testChipMovement_valid() {
        Board board = new Board(9, 9);
        map_levelOne = board.getTileArray();
        // test whether chip is on the correct position of the Board
        assertTrue(map_levelOne[4][4].containsChip());
        // test whether chip can move to the InfoField Tile
        board.moveChip("left");
        assertTrue(map_levelOne[4][3].containsChip() && !map_levelOne[4][4].containsChip());
    }

    /**
     * Description: <br/>
     * Test invalid movement of the Chip. That is, check that the location
     * should remain the same as the destination is invalid.
     * 
     * @author Yun Zhou
     */
    @Test
    public void testChipMovement_invalid() {
        Board board = new Board(9, 9);
        map_levelOne = board.getTileArray();
        board.moveChip("left");
        board.moveChip("left");
        assertTrue(map_levelOne[4][2].containsChip());
        board.moveChip("left");// try to go to the WallTile
        assertTrue(map_levelOne[4][2].containsChip() && map_levelOne[4][1].containsChip() == false);
    }

    /**
     * Description: <br/>
     * Test that if the valid movement by mouse can be made.
     * 
     * @author Yun Zhou
     */
    @Test
    public void testMovementByMouse_valid() {
        boolean isSuccess = false;// for marking whether movements are made
                                  // successfully
        try {
            Board board = new Board(9, 9);
            Chip chip = board.getChip();
            board.moveByMouse(chip.getRow() + 1, chip.getCol());
            board.moveByMouse(chip.getRow() - 1, chip.getCol());
            board.moveByMouse(chip.getRow(), chip.getCol() + 1);
            board.moveByMouse(chip.getRow(), chip.getCol() - 1);
            isSuccess = true;
        } catch (Exception e) {
            System.err.println("Failed.");
            assert false;
        } finally {
            assert isSuccess;
        }
    }

    /**
     * Description: <br/>
     * Test that if the valid movement by mouse can be made. AND check whether
     * it drives the chip go to the correct position.
     * 
     * @author Yun Zhou
     */
    @Test
    public void testMovementByMouse_isSucess() {
        Board board = new Board(9, 9);
        Chip chip = board.getChip();
        assertTrue(chip.getRow() == 4 && chip.getCol() == 4);

        board.moveByMouse(chip.getRow() + 1, chip.getCol());
        assertTrue(chip.getRow() == 4 + 1 && chip.getCol() == 4);

        board.moveByMouse(chip.getRow() - 1, chip.getCol());
        assertTrue(chip.getRow() == 4 + 1 - 1 && chip.getCol() == 4);

        board.moveByMouse(chip.getRow(), chip.getCol() + 1);
        assertTrue(chip.getRow() == 4 + 1 - 1 && chip.getCol() == 4 + 1);

        board.moveByMouse(chip.getRow(), chip.getCol() - 1);
        assertTrue(chip.getRow() == 4 + 1 - 1 && chip.getCol() == 4 + 1 - 1);
    }

    /**
     * Description: <br/>
     * Test that the invalid movement by mouse cannot be made.
     * 
     * @author Yun Zhou
     */
    @Test
    public void testMovementByMouse_invalid() {
        Board board = new Board(9, 9);
        Chip chip = board.getChip();
        boolean isSucess = false;
        try {
            assertFalse(board.moveByMouse(chip.getRow() + 2, chip.getCol()));
            assertFalse(board.moveByMouse(chip.getRow() - 2, chip.getCol()));
            assertFalse(board.moveByMouse(chip.getRow(), chip.getCol() + 2));
            assertFalse(board.moveByMouse(chip.getRow(), chip.getCol() - 2));
            isSucess = true;
        } catch (IllegalArgumentException e) {
            /*
             * the index is invalid, so it should throw the
             * IllegalArgumentException.
             */
            assert false;
        } finally {
            assert isSucess;
        }
    }

    /**
     * Description: <br/>
     * Test whether it will throw the IndexOutOfBoundsException when the player
     * click out of the Bounds index.
     * 
     * @author Yun Zhou
     */
    @Test
    public void testMovementByMouse_OutOfBounds() {
        Board board = new Board(9, 9);
        try {
            assertFalse(board.moveByMouse(-1, 0));
            assertFalse(board.moveByMouse(0, -1));
            assertFalse(board.moveByMouse(9, 0));
            assertFalse(board.moveByMouse(0, 9));
        } catch (IndexOutOfBoundsException e) {
            System.err.println("Index out of Bounds exception!");
            assert false;
        }
    }

    /**
     * Description: <br/>
     * Test the boundry of the map. Check whether the chip is still on the Board
     * or not.
     * 
     * @author Yun Zhou
     */
    @Test
    public void testBoundsMovementSouth() {
        Board board = new Board(9, 9);
        map_levelOne = board.getTileArray();
        board.moveChip("down");
        board.moveChip("down");
        board.moveChip("down");
        assertTrue(map_levelOne[7][4].containsChip());
        board.moveChip("left");
        board.moveChip("down");
        board.moveChip("down");
        board.moveChip("down");
        board.moveChip("down");
        assertTrue(map_levelOne[8][3].containsChip());
    }

    /**
     * Description: <br/>
     * Test the boundry of the map. Check whether the chip is still on the Board
     * or not.
     * 
     * @author Yun Zhou
     */
    @Test
    public void testBoundsMovementNorth() {
        Board board = new Board(9, 9);
        map_levelOne = board.getTileArray();
        board.getChip().setCol(0);
        board.getChip().setRow(0);
        boolean isValid = board.moveChip("up");
        assertFalse(isValid);

    }

    /**
     * Description: <br/>
     * Test the boundry of the map. Check whether the chip is still on the Board
     * or not.
     * 
     * @author Yun Zhou
     */
    @Test
    public void testBoundsMovementLeft() {
        Board board = new Board(9, 9);
        map_levelOne = board.getTileArray();
        board.getChip().setCol(0);
        board.getChip().setRow(0);
        boolean isValid = board.moveChip("left");
        assertFalse(isValid);

    }

    /**
     * Description: <br/>
     * Test the boundry of the map. Check whether the chip is still on the Board
     * or not.
     * 
     * @author Yun Zhou
     */
    @Test
    public void testBoundsMovementRight() {
        Board board = new Board(9, 9);
        map_levelOne = board.getTileArray();
        board.getChip().setCol(8);
        board.getChip().setRow(8);
        boolean isValid = board.moveChip("right");
        assertFalse(isValid);

    }

    /**
     * Description: <br/>
     * After several movements, check whether there is only one Chip on the
     * Board.
     * 
     * @author Yun Zhou
     */
    @Test
    public void testOneChipOnBoard() {
        Board board = new Board(9, 9);
        map_levelOne = board.getTileArray();
        board.moveChip("left");
        board.moveChip("up");
        board.moveChip("left");
        board.moveChip("right");
        board.getChip().setCol(0);
        board.getChip().setRow(0);
        int chip_number = 0;
        for (int i = 0; i < map_levelOne.length; i++) {
            for (int j = 0; j < map_levelOne[i].length; j++) {
                if (map_levelOne[i][j].containsChip()) {
                    // System.out.println(
                    // "hi:" + board.getChip().getCol() + "\t" +
                    // board.getChip().getRow());
                    chip_number++;
                }
            }
        }
        assertTrue(chip_number == 1);
    }

    /**
     * Description: <br/>
     * Test that the treasure is collected by the player successfully.
     * 
     * @author Yun Zhou
     */
    @Test
    public void testCollectTreasure() {
        Board board = new Board(9, 9);
        map_levelOne = board.getTileArray();
        FreeTile freeTile = (FreeTile) map_levelOne[6][4];

        // check that the treasure is here
        assertTrue(freeTile.getItem() instanceof Treasure);
        // move down to pick up the Treasure
        board.moveChip(down);
        board.moveChip(down);
        board.moveChip(down);
        // check that the treasure is GONE
        assertFalse(freeTile.getItem() instanceof Treasure);

    }

    /**
     * Description: <br/>
     * Test that the treasure numbers are correct.
     * 
     * @author Yun Zhou
     */
    @Test
    public void testTreasureNumber() {
        Board board = new Board(9, 9);
        map_levelOne = board.getTileArray();
        FreeTile freeTile = (FreeTile) map_levelOne[6][4];
        int origTreasureNumber = board.getTreasureRemaining();
        assert origTreasureNumber > 0;// treasure must be positive!

        // check that the treasure is here
        assertTrue(freeTile.getItem() instanceof Treasure);
        // move down to pick up the Treasure
        board.moveChip(down);
        board.moveChip(down);
        board.moveChip(down);
        // check that the treasure is GONE
        assertFalse(freeTile.getItem() instanceof Treasure);
        /*
         * check that the number of treasures are positive and be subtracted
         * from the Board
         */
        if (origTreasureNumber > board.getTreasureRemaining()
                && origTreasureNumber == board.getTreasureRemaining() + 1
                && board.getTreasureRemaining() >= 0) {
            assert true;
        } else {
            // something went wrong, assert false
            assert false;
            System.err.println("treasure number is incorrect, need to fix.");
        }

    }

    /**
     * Description: <br/>
     * Test whether the key is picked up or not.
     * 
     * @author Yun Zhou
     */
    @Test
    public void testPickUpValidKey() {
        Board board = new Board(9, 9);
        map_levelOne = board.getTileArray();
        Chip chip = board.getChip();
        assertFalse(chip.containsKey(Color.red));
        assertTrue(chip.getKeys().isEmpty());// check that the key list is empty

        FreeTile keyTile = (FreeTile) map_levelOne[5][6];
        assertTrue(keyTile.getItem() instanceof Key
                && ((Key) keyTile.getItem()).getColour().equals(Color.red));
        board.moveChip("down");
        board.moveChip("right");
        board.moveChip("right");// pick the red key
        board.moveChip("down");
        /* check whether the key has be picked up or not */
        // check if it's still on Board or not
        assertFalse(keyTile.getItem() instanceof Key);
        // check if the Chip got the Key in his keyList
        assertTrue(chip.containsKey(Color.red));
        assertTrue(chip.getKeys().size() == 1);// check that the key list is 1

    }

    /**
     * Description: <br/>
     * Test that it is invalid for using the invalid Color key to unlock the
     * door.
     * 
     * @author Yun Zhou
     */
    @Test
    public void testInvalidKey_unlockDoor() {
        Board board = new Board(9, 9);
        map_levelOne = board.getTileArray();
        Chip chip = board.getChip();
        assertFalse(chip.containsKey(Color.red));

        FreeTile keyTile = (FreeTile) map_levelOne[5][6];
        assertTrue(keyTile.getItem() instanceof Key
                && ((Key) keyTile.getItem()).getColour().equals(Color.red));
        board.moveChip("down");
        board.moveChip("right");
        board.moveChip("right");// pick the red key
        board.moveChip("down");
        /* check whether the key has be picked up or not */
        // check if it's still on Board or not
        assertFalse(keyTile.getItem() instanceof Key);
        // check if the Chip got the Key in his keyList
        assertTrue(chip.containsKey(Color.red));
        LockedDoor lockedDoor = (LockedDoor) map_levelOne[6][7];
        assertTrue(lockedDoor instanceof LockedDoor && lockedDoor.getColour().equals(Color.blue));
        // trying to unlock the Blue Door with red Key
        board.moveChip("right");
        assertTrue(lockedDoor instanceof LockedDoor);
    }

    /**
     * Description: <br/>
     * Test using the valid Color key to unlock the specified door. This test
     * will check whether the key has been collected by the player and whether
     * the LockedDoor Tile has changed to FreeTile.
     * 
     * @author Yun Zhou
     */
    @Test
    public void testValidKey_unlockDoor() {
        Board board = new Board(9, 9);
        map_levelOne = board.getTileArray();
        Chip chip = board.getChip();
        assertFalse(chip.containsKey(Color.red));

        FreeTile keyTile = (FreeTile) map_levelOne[5][6];
        assertTrue(keyTile.getItem() instanceof Key
                && ((Key) keyTile.getItem()).getColour().equals(Color.red));
        board.moveChip("down");
        board.moveChip("right");
        board.moveChip("right");// pick the red key
        board.moveChip("down");
        /*
         * check whether the key has be picked up or not
         */
        // check if it's still on Board or not
        assertFalse(keyTile.getItem() instanceof Key);
        // check if the Chip got the Key in his keyList
        assertTrue(chip.containsKey(Color.red));
        assert chip.getKeys().size() == 1;// check the size of list

        LockedDoor lockedDoor = (LockedDoor) map_levelOne[6][1];
        Color lockedDoorColor = lockedDoor.getColour();
        assertTrue(lockedDoor instanceof LockedDoor && lockedDoorColor.equals(Color.red));

        // move left to unlock the red color door
        for (int i = 0; i < 8; i++) {
            board.moveChip("left");
        }
        map_levelOne = board.getTileArray();// update the pointer
        assertTrue(map_levelOne[6][1] instanceof FreeTile);// should be freeTile
        assertFalse(chip.containsKey(Color.red));// the key should gone
        assertTrue(chip.getKeys().isEmpty());// check the keyList size

    }

    /**
     * Description: <br/>
     * A test for checking that the key has gone and chip can not unlock the
     * same color door again.
     * 
     * @author Yun Zhou
     */
    @Test
    public void testNoMultiTimesToUnlockDoor() {
        Board board = new Board(9, 9);
        map_levelOne = board.getTileArray();

        // check if they are all locked doors first
        boolean allAreLockedDoor = false;
        if (map_levelOne[2][1] instanceof LockedDoor && map_levelOne[1][2] instanceof LockedDoor) {
            allAreLockedDoor = true;
        }
        assertTrue(allAreLockedDoor);

        board.moveChip(left);
        board.moveChip(left);
        board.moveChip(up);
        board.moveChip(up);
        board.moveChip(up);// one door should be unlocked now
        board.moveChip(down);
        board.moveChip(left);// try to unlock another door
        map_levelOne = board.getTileArray();// update the pointer

        // check agagin
        allAreLockedDoor = false;
        if (map_levelOne[2][1] instanceof LockedDoor && map_levelOne[1][2] instanceof LockedDoor) {
            allAreLockedDoor = true;
        }
        // System.out.println(board.toString() + allAreLockedDoor);
        assertFalse(allAreLockedDoor);

    }

    /**
     * Description: <br/>
     * Try to break the ExitLock before collect all treasures. Test that the
     * ExitLock is still there.
     * 
     * @author Yun Zhou
     */
    @Test
    public void testInvalidExitLock() {
        Board board = new Board(9, 9);
        map_levelOne = board.getTileArray();
        FreeTile exitLock = (FreeTile) map_levelOne[1][4];

        // check the status of the ExitLock
        boolean isExitLock = (exitLock.getItem() instanceof ExitLock);
        assertTrue(isExitLock); // check if the ExitLock is still here

        // go to the ExitLock
        board.moveChip(left);
        board.moveChip(up);
        board.moveChip(up);
        board.moveChip(right);
        board.moveChip(up);
        board.moveChip(up);
        // check the status again
        isExitLock = (exitLock.getItem() instanceof ExitLock);
        assertTrue(isExitLock); // check if the ExitLock is still here

    }

    /**
     * Description: <br/>
     * Collect all treasures in the current level and break the exitlock.
     * 
     * @author Yun Zhou
     */
    @Test
    public void testExitLock() {
        Board board = new Board(9, 9);
        map_levelOne = board.getTileArray();
        FreeTile exitLock = (FreeTile) map_levelOne[1][4];

        boolean isExitLock = (exitLock.getItem() instanceof ExitLock);
        assertTrue(isExitLock);// check if the ExitLock is still here

        /*
         * DO all the movements to get all treasures and try to break the
         * ExitLock
         */
        board.moveChip(left);
        board.moveChip(left);
        board.moveChip(down);
        board.moveChip(right);
        board.moveChip(right);
        board.moveChip(down);
        board.moveChip(right);
        board.moveChip(right);
        board.moveChip(up);
        board.moveChip(up);
        board.moveChip(up);
        board.moveChip(up);
        board.moveChip(up);
        board.moveChip(up);
        board.moveChip(up);
        board.moveChip(right);
        board.moveChip(left);
        board.moveChip(down);
        board.moveChip(down);
        for (int i = 0; i < 5; i++) {
            board.moveChip(left);
        }
        board.moveChip(down);
        board.moveChip(up);
        board.moveChip(up);
        board.moveChip(up);
        board.moveChip(left);
        board.moveChip(right);
        board.moveChip(down);
        board.moveChip(down);
        board.moveChip(right);
        board.moveChip(right);
        board.moveChip(up);

        // check that the ExitLock is gone
        isExitLock = (exitLock.getItem() instanceof ExitLock);

        assertFalse(isExitLock);// check that the ExitLock is gone

    }

    /**
     * Description: <br/>
     * Check whether the level is finished after all treasures has been
     * collected and Chip is on the ExitTile.
     * 
     * @author Yun Zhou
     */
    @Test
    public void testFinishLevel() {
        Board board = new Board(9, 9);
        map_levelOne = board.getTileArray();
        FreeTile exitLock = (FreeTile) map_levelOne[1][4];

        boolean isExitLock = (exitLock.getItem() instanceof ExitLock);
        assertTrue(isExitLock);// check if the ExitLock is still here

        /*
         * DO all the movements to get all treasures and try to break the
         * ExitLock to go to the Exit
         */
        board.moveChip(left);
        board.moveChip(left);
        board.moveChip(down);
        board.moveChip(right);
        board.moveChip(right);
        board.moveChip(down);
        board.moveChip(right);
        board.moveChip(right);
        board.moveChip(up);
        board.moveChip(up);
        board.moveChip(up);
        board.moveChip(up);
        board.moveChip(up);
        board.moveChip(up);
        board.moveChip(up);
        board.moveChip(right);
        board.moveChip(left);
        board.moveChip(down);
        board.moveChip(down);
        for (int i = 0; i < 5; i++) {
            board.moveChip(left);
        }
        board.moveChip(down);
        board.moveChip(up);
        board.moveChip(up);
        board.moveChip(up);
        board.moveChip(left);
        board.moveChip(right);
        board.moveChip(down);
        board.moveChip(down);
        board.moveChip(right);
        board.moveChip(right);
        board.moveChip(up);

        assertFalse(board.isLevelFinished());// check it's not finished yet

        boolean isLevelOver = board.moveChip(up);
        isExitLock = (exitLock.getItem() instanceof ExitLock);

        /*
         * Check that the ExitLock has gone and the Level is finished as all
         * treasures has gone
         */
        assertFalse(isExitLock);// check the exitlock has gone
        assertTrue(isLevelOver && board.isLevelFinished());// check it's
                                                           // finished

        Exit exit = (Exit) map_levelOne[0][4];
        boolean isAtExit = exit.containsChip();
        assertTrue(isAtExit);

        /*
         * further check that the player can NOT move as the level is finished.
         */
        board.moveChip(down);
        board.moveChip(down);
        exit = (Exit) map_levelOne[0][4];// update the pointer
        isAtExit = exit.containsChip();// update the pointer
        assertTrue(isAtExit);// check if the chip is still on the Exit

    }

    /**
     * Description: <br/>
     * A test for using JsonParser class (i.e. persistance module) to construct
     * the game board.
     * 
     * @author Yun Zhou
     */
    @Test
    public void TOFIX_testJSONBoardConstructor() {
        // Tile[][] jsonTiles = JsonParser.getLvl(leve1);
        // Tile[][] normalTiles = new Board(9, 9).getTileArray();
        // assert jsonTiles.equals(normalTiles);

        // Board normal_board = new Board(9,9);
        // Board JsonBoard = new Board("level1");
        // assert JsonBoard.getTileArray().equals(normalBoard.getTileArray());
        // assert JsonBoard.equals(normalBoard);
        // assertTrue(JsonBoard.toString().equals(normalBoard.toString()));

    }

    /**
     * Description: <br/>
     * Test the level number is correct after the current level is finished.
     * 
     * @author Yun Zhou
     */
    @Test
    public void TODO_testLevelNumber() {

    }
    // @Test
    // public void test() {
    // Board board = new Board(9, 9);
    // map_levelOne = board.getTileArray();
    //
    // }

    @Test
    public void TODO_WaterMove_valid() {

    }

    @Test
    public void TODO_WaterMove_invalid() {

    }

    @Test
    public void TODO_moveBlocks_valid() {

    }

    @Test
    public void TODO_moveBlocks_invalid() {

    }

}
